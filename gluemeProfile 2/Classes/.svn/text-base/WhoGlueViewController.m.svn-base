//
//  WhoGlueViewController.m
//  glueme
//
//  Created by OPENXCELL TECHNOLABS on 9/20/11.
//  Copyright 2011 __MyCompanyName__. All rights reserved.
//

#import "WhoGlueViewController.h"
#import "FAQHelp.h"
#import "DisplayMap.h"
#import "iCodeBlogAnnotation.h"
#import "AlertHandler.h"
#import "GdataParser.h"
#import "meetingpointview.h"

@implementation WhoGlueViewController

static NSString* const GMAP_ANNOTATION_SELECTED = @"gMapAnnontationSelected";
@synthesize userProfileVw,mapView,mapAnnotations,ImgMapViewHome,ImgMapView,ImgMapViewHome3,annView,latArray,longArray,cnt,profImgBtn,ImgArray,dic,contactemail,LblName,nameArray;


// The designated initializer.  Override if you create the controller programmatically and want to perform customization that is not appropriate for viewDidLoad.
/*
- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization.
    }
    return self;
}
*/


// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.
- (void)viewDidLoad {
    
    /*
     Test@testiest.com
     123456789
     1999-10-12
     */
    
    [super viewDidLoad];
    appDelegateObj = (gluemeAppDelegate *)[[UIApplication sharedApplication]delegate];
    //mapView = [[MKMapView alloc] initWithFrame:self.view.bounds];
    mapView.delegate = self;
    
    
    [self.view addSubview:mapView];
    [self.view addSubview:userProfileVw];
    [mapView bringSubviewToFront:userProfileVw];
    [NSThread detachNewThreadSelector:@selector(displayMyMap) toTarget:self withObject:nil];
    
    self.navigationController.navigationBar.alpha = 0.0;
    
    self.navigationController.navigationBar.tintColor = [UIColor clearColor];
    UIImageView *topbarImg = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 320, 46)];
    [topbarImg setImage:[UIImage imageNamed:@"FirstTopBar.png"]];
    
    [self.view addSubview:topbarImg];
    [self.navigationController.navigationBar sendSubviewToBack:topbarImg];
    
    UIButton *BumpBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    BumpBtn.frame = CGRectMake(268,10, 35, 34);
    
    [BumpBtn addTarget:self action:@selector(Bump) forControlEvents:UIControlEventTouchUpInside];
    
    [self.view addSubview:BumpBtn]; 
    
         
//	self.mapView.mapType = MKMapTypeStandard;   // also MKMapTypeSatellite or MKMapTypeHybrid
//	
//    // create a custom navigation bar button and set it to always says "Back"
//	UIBarButtonItem *temporaryBarButtonItem = [[UIBarButtonItem alloc] init];
//	temporaryBarButtonItem.title = @"Back";
//	self.navigationItem.backBarButtonItem = temporaryBarButtonItem;
//	[temporaryBarButtonItem release];
//    
//    // create out annotations array (in this example only 2)
//    self.mapAnnotations = [[NSMutableArray alloc] initWithCapacity:2];
    
    	
}

-(void)Bump
{
    NSLog(@"BumpClicked");
    bumpObj = [[Bump alloc] initWithNibName:@"Bump" bundle:nil];
    [self.navigationController pushViewController:bumpObj animated:YES];
    
}


-(void)viewWillAppear:(BOOL)animated
{

	
	locationManager = [[CLLocationManager alloc]init];
	if([CLLocationManager locationServicesEnabled])
	{
		locationManager.delegate = self;
		locationManager.desiredAccuracy  = kCLLocationAccuracyKilometer;
		locationManager.distanceFilter = 1000.0f;
		[locationManager startUpdatingLocation];

	//	appDelegateObj.latitude= [[NSString alloc]initWithFormat:@"%g",locationManager.];
		//appDelegateObj.longitude = [[NSString alloc]initWithFormat:@"%g",locationManager.longitude];
        			
	}
	

		
	annTypeArray = [[NSMutableArray alloc] init];
    ImgArray = [[NSMutableArray alloc] init];
	
    [ImgArray addObject:@"p3.png"];
    [ImgArray addObject:@"p4.png"]; 
	
    //latArray = [[NSMutableArray alloc] initWithObjects:@"41.7912645013",@"43.036", nil];
   
	latArray = [[NSMutableArray alloc] init];
    nameArray = [[NSMutableArray alloc] init];
    Lnamearray=[[NSMutableArray alloc]init];
    
	// [nameArray addObject:@"test"]; 
    contactnum = [[NSMutableArray alloc] init];
   // [contactnum addObject:@"8128123650"];
    contactemail = [[NSMutableArray alloc] init];
   // [contactemail addObject:@"Test@test.com"];
    bdateArray = [[NSMutableArray alloc] init];
   // [bdateArray addObject:@"2001-11-14"];
    cnt = [latArray count];
    //    longArray = [[NSMutableArray alloc] initWithObjects:@"-87.5811598203",@"-87.917", nil];
    longArray = [[NSMutableArray alloc] init];
    
   
  //  [latArray addObject:appDelegateObj.latitude];
   // [longArray addObject:appDelegateObj.longitude];
    
   }



- (void)locationManager:(CLLocationManager *)manager didUpdateToLocation:(CLLocation *)newLocation fromLocation:(CLLocation *)oldLocation {
	
	appDelegateObj.latitude= [[NSString alloc]initWithFormat:@"%g",newLocation.coordinate.latitude];
	appDelegateObj.longitude = [[NSString alloc]initWithFormat:@"%g",newLocation.coordinate.longitude];
   
	
	MKCoordinateRegion region;  
    MKCoordinateSpan span;  
    span.latitudeDelta=0.2;  
    span.longitudeDelta=0.2;  
	
    CLLocationCoordinate2D location;  
	
	location.latitude = newLocation.coordinate.latitude ;
	location.longitude = newLocation.coordinate.longitude;
	
	
    region.span=span;  
    region.center=location;  
	
    [mapView setRegion:region animated:TRUE];  
    [mapView regionThatFits:region];

	
	NSString *urlString = [NSString stringWithFormat:@"http://www.openxcellaus.info/glueme/update_lat_lon.php?uid=%d&lat=%@&lon=%@",appDelegateObj.userID,appDelegateObj.latitude,appDelegateObj.longitude];
    
    NSLog(@"%@",urlString);
    
    NSMutableURLRequest *request=[NSMutableURLRequest requestWithURL:[NSURL URLWithString:urlString]];
    
	JSONParser *parser;
    parser= [[JSONParser alloc] initWithRequestForThread:request sel:@selector(datafatchupdate:) andHandler:self];
	NSLog(@"lat n lon :%@  %@",  appDelegateObj.latitude,appDelegateObj.longitude);
}

-(void)datafatchupdate:(NSDictionary*)dictionary{
	NSString *urlString = [NSString stringWithFormat:@"http://www.openxcellaus.info/glueme/user_list.php?user_id=%d",appDelegateObj.userID];
    
    NSLog(@"%@",urlString);
    
    NSMutableURLRequest *request=[NSMutableURLRequest requestWithURL:[NSURL URLWithString:urlString]];
    
    JSONParser *parser;
    parser= [[JSONParser alloc] initWithRequestForThread:request sel:@selector(datafatch:) andHandler:self];
	

}

-(void)datafatch:(NSDictionary*)dictionary{
    
//    contactArray = [[NSMutableArray alloc] init];
//    
//    contactname = [[NSMutableArray alloc] init];
//    contactnum = [[NSMutableArray alloc] init];
//    contactemail = [[NSMutableArray alloc] init];
    //[annTypeArray addObject:[NSString stringWithFormat:@"%d",iCodeBlogAnnotationTypeEDU]];
    
    NSLog(@"%@",dictionary);
    
    dic = [[NSMutableDictionary alloc] initWithDictionary:dictionary]; 
	NSString *deviceType = [UIDevice currentDevice].model;


	if([deviceType isEqualToString:@"iPod touch"]||[deviceType isEqualToString:@"iPhone"]||[deviceType isEqualToString:@"iPad"]){
		
	[latArray addObject:appDelegateObj.latitude];
	
	[longArray addObject:appDelegateObj.longitude];
	}
	else {
		[latArray addObject:@"0.000000"];
		
		[longArray addObject:@"0.000000"];
	}

	
    for (int i=0; i<[[dictionary valueForKey:@"Record"]count]; i++) 
    {   
        [contactnum addObject:[[[dictionary valueForKey:@"Record"] valueForKey:@"phone"] objectAtIndex:i]];
        
        [contactemail addObject:[[[dictionary valueForKey:@"Record"] valueForKey:@"email"] objectAtIndex:i]];
        
        [nameArray addObject:[[[dictionary valueForKey:@"Record"] valueForKey:@"firstname"] objectAtIndex:i]];
        [bdateArray addObject:[[[dictionary valueForKey:@"Record"] valueForKey:@"bday"] objectAtIndex:i]];
        
    }
//    for(int k=0;k<([latArray count]-1);k++)
//    {
//    [annTypeArray addObject:[NSString stringWithFormat:@"%d",iCodeBlogAnnotationTypeApple]];
//    }
    
    //NSLog(@"%@",nameArray);
//    NSLog(@"%@",latArray);
//    NSLog(@"%@",longArray);
//    NSLog(@"%@",contactnum);
//    NSLog(@"%@",contactemail);
   
    
    NSString *urlString = [NSString stringWithFormat:@"http://www.openxcellaus.info/glueme/friend_list.php?user_id=%d",appDelegateObj.userID];
    
   // NSLog(@"%@",urlString);
    
    NSMutableURLRequest *request=[NSMutableURLRequest requestWithURL:[NSURL URLWithString:urlString]];
    
    JSONParser *parser;
    parser= [[JSONParser alloc] initWithRequestForThread:request sel:@selector(datafatch1:) andHandler:self];
    
}
-(void)datafatch1:(NSDictionary*)dictionary{
    
    //    contactArray = [[NSMutableArray alloc] init];
    //    
    //    contactname = [[NSMutableArray alloc] init];
    //    contactnum = [[NSMutableArray alloc] init];
    //    contactemail = [[NSMutableArray alloc] init];
    [annTypeArray addObject:[NSString stringWithFormat:@"%d",iCodeBlogAnnotationTypeEDU]];
    
    NSLog(@"%@",dictionary);
    
    dic = [[NSMutableDictionary alloc] initWithDictionary:dictionary];    
    for (int i=0; i<[[dictionary valueForKey:@"friend_list"]count]; i++) 
    {
        
        
        
        [latArray addObject:[[[dictionary valueForKey:@"friend_list"] valueForKey:@"lat"] objectAtIndex:i]];
        
        [longArray addObject:[[[dictionary valueForKey:@"friend_list"] valueForKey:@"lon"] objectAtIndex:i]];
        
        [contactnum addObject:[[[dictionary valueForKey:@"friend_list"] valueForKey:@"phone"] objectAtIndex:i]];
        
        [contactemail addObject:[[[dictionary valueForKey:@"friend_list"] valueForKey:@"email"] objectAtIndex:i]];
        
        [nameArray addObject:[[[dictionary valueForKey:@"friend_list"] valueForKey:@"firstname"] objectAtIndex:i]];
        [bdateArray addObject:[[[dictionary valueForKey:@"friend_list"] valueForKey:@"bday"] objectAtIndex:i]];
        [Lnamearray addObject:[[[dictionary valueForKey:@"friend_list"] valueForKey:@"lastname"] objectAtIndex:i]];
        
        
        
        
    }
    for(int k=0;k<([latArray count]-1);k++)
    {
        [annTypeArray addObject:[NSString stringWithFormat:@"%d",iCodeBlogAnnotationTypeApple]];
    }
    
    NSLog(@"%@",nameArray);
    NSLog(@"%@",latArray);
    NSLog(@"%@",longArray);
    NSLog(@"%@",contactnum);
    NSLog(@"%@",contactemail);
    
    
    [self loadOurAnnotations];
    
    //    
    //    [GlueContactTbl reloadData];
    
}

-(IBAction)call:(id)sender{
    NSString *uname = (NSString *) CFURLCreateStringByAddingPercentEscapes(kCFAllocatorDefault, (CFStringRef)appDelegateObj.phnStr, NULL, CFSTR(":/?#[]@!$&’()*+,;="), kCFStringEncodingUTF8);
    
    NSURL *phoneNumberURL = [NSURL URLWithString:[NSString stringWithFormat:@"tel://%@",uname]];
    
    NSLog(@"Phone URL %@",phoneNumberURL);
    [[UIApplication sharedApplication] openURL:phoneNumberURL];
     
}
-(IBAction)email:(id)sender{
    MFMailComposeViewController* controller = [[MFMailComposeViewController alloc] init];
    controller.mailComposeDelegate = self;
    [controller setSubject:@"My Subject"];
    arrlist=[[NSMutableArray alloc]init];
    
    [arrlist addObject:appDelegateObj.emailStr];
    

    [controller setToRecipients:arrlist];
    
    
    
    
    [controller setMessageBody:@"Hello there." isHTML:NO]; 
    if (controller) [self presentModalViewController:controller animated:YES];
    [controller release];
	
}
-(IBAction)direction:(id)sender{
    MapWithRoutesViewController *objmapview;

    objmapview =[[MapWithRoutesViewController alloc]initWithNibName:@"MapWithRoutesViewController" bundle:nil];

    appDelegateObj.strfromlatuser=[latArray objectAtIndex:0];
    
    appDelegateObj.strfromlonguser=[longArray objectAtIndex:0];
    
    

    appDelegateObj.strtolatuser=appDelegateObj.latitude;
    
    
    appDelegateObj.strtolonguser=appDelegateObj.longitude;

    
    
    [self.navigationController  pushViewController:objmapview animated:YES];
    
}
-(IBAction)message:(id)sender{

	MFMessageComposeViewController *controller = [[[MFMessageComposeViewController alloc] init] autorelease];
	if([MFMessageComposeViewController canSendText])
	{
		controller.body = @"Hello from Mugunth";
		controller.recipients = [NSArray arrayWithObjects:appDelegateObj.phnStr, nil];
		controller.messageComposeDelegate = self;
		[self presentModalViewController:controller animated:YES];
	}
;
	
}


- (void)messageComposeViewController:(MFMessageComposeViewController *)controller didFinishWithResult:(MessageComposeResult)result {
   
    switch (result)
    {
        case MessageComposeResultCancelled:
            NSLog(@"Result: canceled");
            break;
        case MessageComposeResultSent:
            NSLog(@"Result: sent");
            break;
        case MessageComposeResultFailed:
            NSLog(@"Result: failed");
            break;
        default:
            NSLog(@"Result: not sent");
            break;
    }
    
    [self dismissModalViewControllerAnimated:YES];
    
}
- (void)mailComposeController:(MFMailComposeViewController*)controller  
          didFinishWithResult:(MFMailComposeResult)result 
                        error:(NSError*)error;
{
	if (result == MFMailComposeResultSent) {
		//nslog(@"It's away!");
	}
	[self dismissModalViewControllerAnimated:YES];
}



-(void)loadOurAnnotations
{
 CLLocationCoordinate2D workingCoordinate;
 
    
    for (int i=0; i<[latArray count]; i++) {
        workingCoordinate.latitude = [[latArray objectAtIndex:i] floatValue];
        workingCoordinate.longitude = [[longArray objectAtIndex:i] floatValue];
       
		CLLocationCoordinate2D newCoord = {workingCoordinate.latitude, workingCoordinate.longitude};
		//DisplayMap *ann = [[DisplayMap alloc] init]; 
//		
//		ann.title = @" Kolkata";
//		ann.subtitle = @"Mahatma Gandhi Road"; 
//		ann.coordinate = newCoord; 
//		[mapView addAnnotation:ann];
		
		
		iCodeBlogAnnotation *appleStore4 = [[iCodeBlogAnnotation alloc] initWithCoordinate:workingCoordinate];
        // [appleStore2 setTitle:@"Apple Store St. Regent"];
        // [appleStore2 setSubtitle:@"London England"];
        
        //[appleStore4 setAnnotationType:iCodeBlogAnnotationTypeEDU];
        
       // [appleStore4 setAnnotationType:[[annTypeArray objectAtIndex:i] intValue]];
        
        // [self showView];
        [mapView addAnnotation:appleStore4];
    }
    
    
//    workingCoordinate.latitude = 32.44;
//    workingCoordinate.longitude = 90.17;
//    iCodeBlogAnnotation *appleStore4 = [[iCodeBlogAnnotation alloc] initWithCoordinate:workingCoordinate];
//    // [appleStore2 setTitle:@"Apple Store St. Regent"];
//    // [appleStore2 setSubtitle:@"London England"];
//    [appleStore4 setAnnotationType:iCodeBlogAnnotationTypeApple];
//    
//    // [self showView];
//    [mapView addAnnotation:appleStore4];
//    
//    
//    workingCoordinate.latitude = 39.83;
//    workingCoordinate.longitude = 89.64;
//    iCodeBlogAnnotation *appleStore3 = [[iCodeBlogAnnotation alloc] initWithCoordinate:workingCoordinate];
//    // [appleStore2 setTitle:@"Apple Store St. Regent"];
//    // [appleStore2 setSubtitle:@"London England"];
//    [appleStore3 setAnnotationType:iCodeBlogAnnotationTypeApple];
//    
//    // [self showView];
//    [mapView addAnnotation:appleStore3];
//    
//    
//    
//    
//    
//    
// workingCoordinate.latitude = 51.514298;
// workingCoordinate.longitude = -0.141949;
// iCodeBlogAnnotation *appleStore2 = [[iCodeBlogAnnotation alloc] initWithCoordinate:workingCoordinate];
//// [appleStore2 setTitle:@"Apple Store St. Regent"];
//// [appleStore2 setSubtitle:@"London England"];
// [appleStore2 setAnnotationType:iCodeBlogAnnotationTypeApple];
// 
//   // [self showView];
// [mapView addAnnotation:appleStore2];
    
    //[self PassData];
   /* 
    workingCoordinate.latitude = 41.7912645013;
    workingCoordinate.longitude = -87.5811598203;
    iCodeBlogAnnotation *appleStore1 = [[iCodeBlogAnnotation alloc] initWithCoordinate:workingCoordinate];
    // [appleStore1 setTitle:@"Apple Store 5th Ave."];
    // [appleStore1 setSubtitle:@"Apple's Flagship Store"];
    [appleStore1 setAnnotationType:iCodeBlogAnnotationTypeEDU];
    
    //[self showView];
    [mapView addAnnotation:appleStore1];

    */
}


//- (MKAnnotationView *)mapView:(MKMapView *)mapViewLocal viewForAnnotation:(id <MKAnnotation>)annotation {
//	MKPinAnnotationView *pinView = (MKPinAnnotationView*)[mapViewLocal dequeueReusableAnnotationViewWithIdentifier:@"Pin"];
//	if(pinView == nil) {
//        pinView = [[MKPinAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:@"Pin"];
//        pinView.pinColor = MKPinAnnotationColorPurple;
//        pinView.rightCalloutAccessoryView = [UIButton buttonWithType:UIButtonTypeDetailDisclosure];
//        pinView.animatesDrop = YES;
//        pinView.canShowCallout = YES;
//	} else {
//        pinView.annotation = annotation;
//	}
//	return pinView;
//	
//}
 
- (iCodeBlogAnnotationView *)mapView:(MKMapView *)mapView viewForAnnotation:(id <MKAnnotation>)annotation
{
 iCodeBlogAnnotationView *annotationView = nil;
    
 // determine the type of annotation, and produce the correct type of annotation view for it.
 iCodeBlogAnnotation* myAnnotation = (iCodeBlogAnnotation *)annotation;
 
 if(myAnnotation.annotationType == iCodeBlogAnnotationTypeApple)
 {
 NSString* identifier = @"Apple";
 iCodeBlogAnnotationView *newAnnotationView = (iCodeBlogAnnotationView *)[self.mapView dequeueReusableAnnotationViewWithIdentifier:identifier];
 
 if(nil == newAnnotationView)
 {
 newAnnotationView = [[[iCodeBlogAnnotationView alloc] initWithAnnotation:myAnnotation reuseIdentifier:identifier] autorelease];
 }
 
 annotationView = newAnnotationView;
 }
 else if(myAnnotation.annotationType == iCodeBlogAnnotationTypeEDU)
 {
 NSString* identifier = @"School";
 
 iCodeBlogAnnotationView *newAnnotationView = (iCodeBlogAnnotationView *)[self.mapView dequeueReusableAnnotationViewWithIdentifier:identifier];
 
 if(nil == newAnnotationView)
 {
 newAnnotationView = [[[iCodeBlogAnnotationView alloc] initWithAnnotation:myAnnotation reuseIdentifier:identifier] autorelease];
 }
 
 annotationView = newAnnotationView;
 }
 else if(myAnnotation.annotationType == iCodeBlogAnnotationTypeTaco)
 {
 NSString* identifier = @"Taco";
 
 iCodeBlogAnnotationView *newAnnotationView = (iCodeBlogAnnotationView *)[self.mapView dequeueReusableAnnotationViewWithIdentifier:identifier];
 
 if(nil == newAnnotationView)
 {
 newAnnotationView = [[[iCodeBlogAnnotationView alloc] initWithAnnotation:myAnnotation reuseIdentifier:identifier] autorelease];
 }
 
 annotationView = newAnnotationView;
 }
 
 [annotationView setEnabled:YES];
 [annotationView setCanShowCallout:YES];
  [annotationView setParentObj:self];
 return annotationView;
}




// Customize the number of rows in the table view.

// Customize the appearance of table view cells.





-(void)setMapViewPoint
{
	for(int j=0;j<cnt;j++)
	{
        [mapView setMapType:MKMapTypeStandard];
        [mapView setZoomEnabled:YES];
        [mapView setScrollEnabled:YES];
        MKCoordinateRegion region = { {0.0, 0.0 }, { 0.0, 0.0 } };
        
        
        region.center.latitude = [[latArray objectAtIndex:j]floatValue];
        
        region.center.longitude = [[longArray objectAtIndex:j]floatValue];
        region.span.longitudeDelta =2.10f;
        region.span.latitudeDelta =2.10f;
        [mapView setRegion:region animated:YES]; 
        
        [mapView setDelegate:self];
        
        // (0,357,320,100)
        
   //    profImgBtn = [UIButton buttonWithType:UIButtonTypeRoundedRect];
    //   [profImgBtn setImage:[UIImage imageNamed:[ImgArray objectAtIndex:j]] forState:UIControlStateNormal];
//        profImgBtn.frame = CGRectMake(10, 15, 25, 25);
////        
//        [profImgBtn addTarget:self action:@selector(showView) forControlEvents:UIControlEventTouchUpInside];

        
        DisplayMap *ann = [[DisplayMap alloc] init]; 
        
        //ann.title = @" Steve Vai";
        //ann.subtitle = @"Mahatma Gandhi Road"; 
        ann.coordinate = region.center; 
        [mapView addAnnotation:ann];
		
	}
	
	
}

-(IBAction)setmeeting
{
    listVwObj = [[listwhoglued alloc] initWithNibName:@"listwhoglued" bundle:nil];
    [self.navigationController pushViewController:listVwObj animated:NO];
}

-(void)showView:(int)sender
{
   // [userProfileVw setFrame:CGRectMake(0,314, 320, 100)];
    [userProfileVw setHidden:NO];
//    LblEmail.text = [contactemail objectAtIndex:sender];
//    LblPhone.text = [contactnum objectAtIndex:sender];
    LblName.text = [nameArray objectAtIndex:sender];
    appDelegateObj.latitude=[latArray objectAtIndex:sender];
    appDelegateObj.longitude=[longArray objectAtIndex:sender];
    
    appDelegateObj.emailStr = [contactemail objectAtIndex:sender];
    appDelegateObj.phnStr = [contactnum objectAtIndex:sender];
    appDelegateObj.NameStr = LblName.text;
    appDelegateObj.bdateStr = [bdateArray objectAtIndex:sender];
    
    appDelegateObj.lname = [Lnamearray objectAtIndex:sender];
    NSLog(@"%@",appDelegateObj.emailStr);
    NSLog(@"%@",appDelegateObj.phnStr);
}

-(IBAction)onFAQ:(id)sender
{
	FAQHelp *faqhelp=[[FAQHelp alloc]initWithNibName:@"FAQHelp" bundle:nil];
	[self.navigationController pushViewController:faqhelp animated:YES];
	[faqhelp release];
}

-(void)displayMyMap
{
    
//    MKCoordinateRegion region;
//    MKCoordinateSpan span;
//    
//    span.latitudeDelta = 02.569722 ;
//    span.longitudeDelta = 08.369722;
//    
////    NSString *urlString = [NSString stringWithFormat:@"http://maps.google.com/maps/geo?q=%@&output=csv",
////                           [addressField.text stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]];
//    
//    
//    
//    CLLocationCoordinate2D location ;  
//    
//	location.latitude = 22.569722 ;
//	location.longitude = 88.369722;
//    
//    region.span = span;
//    region.center = location;
//    
//    [mapView setRegion:region animated:TRUE];  
//    [mapView regionThatFits:region];  
}


-(IBAction)ClickClose
{
    //[userProfileVw setFrame:CGRectMake(0, 470, 320, 100)];
    [userProfileVw setHidden:YES];
}

-(IBAction)ClickNext
{
    
    profileclassObj = [[profileClass alloc]initWithNibName:@"profileClass" bundle:nil];
    [self.navigationController pushViewController:profileclassObj animated:YES];
    
    
}

/*

-(MKAnnotationView *)mapView:(MKMapView *)mV viewForAnnotation:
(id <MKAnnotation>)annotation {
	
    MKPinAnnotationView *pinView = nil; 
	if(annotation != mapView.userLocation) 
	{
		static NSString *defaultPinID = @"com.invasivecode.pin";
		pinView = (MKPinAnnotationView *)[mapView dequeueReusableAnnotationViewWithIdentifier:defaultPinID];
		if ( pinView == nil )
            pinView = [[[MKPinAnnotationView alloc]
                        initWithAnnotation:annotation reuseIdentifier:defaultPinID] autorelease];
        
       // UIButton *disclosureButton = [UIButton buttonWithType:UIButtonTypeCustom];
//		[disclosureButton setFrame:CGRectMake(0, 0, 20,26)];
//		[disclosureButton setImage:[UIImage imageNamed:@"next2.jpg"] forState:UIControlStateNormal];
//        [disclosureButton addTarget:self action:@selector(showView) forControlEvents:UIControlEventTouchUpInside];
		//pinView.rightCalloutAccessoryView= disclosureButton;
        
        
        NSString *pintitle=[NSString stringWithFormat:@"%@",((MKPinAnnotationView*) pinView).annotation.title];
        NSLog(@"%@",pintitle);
        //        for (int i = 0; i<[appdel.arrList count]; i++)
        //        {
        //            d = (NSMutableDictionary*)[appdel.arrList objectAtIndex:i];
        //            strAddress = [NSString stringWithFormat:@"%@",[d valueForKey:@"title"]];
        //            if([strAddress isEqualToString:pintitle]) 
        //            {
        //                //annot = object;
        //                d = [appdel.arrList objectAtIndex:i];
        //                UIImageView *imageview =[[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 45, 30)];
        //                imgURL= [[NSURL    alloc] initWithString:[d objectForKey:@"mainimage"]]; 
        //                imageview.image = [UIImage imageWithData:[NSData dataWithContentsOfURL:imgURL]];
        //                annView.leftCalloutAccessoryView =imageview;
        //                
        //                appdel.appdelStrID = [d objectForKey:@"id"];
        //                
        //                [imageview release];
        //                break;
        //            }
        //        }
        
        
		pinView.pinColor = MKPinAnnotationColorRed; 
        [pinView setImage:[UIImage imageNamed:@"Shape1.png"]];
        [pinView setFrame:CGRectMake(0, 0, 74, 68)];
    
//        for (int i = 0; i<cnt; i++) {
            profImgBtn = [UIButton buttonWithType:UIButtonTypeRoundedRect];
            [profImgBtn setImage:[UIImage imageNamed:@"p3.png"] forState:UIControlStateNormal];
            profImgBtn.frame = CGRectMake(10, 7, 55, 38);
            
            [profImgBtn addTarget:self action:@selector(showView) forControlEvents:UIControlEventTouchUpInside];
            
            
            [pinView addSubview:profImgBtn];
//        }
        
		pinView.canShowCallout = YES;
        
		//pinView.animatesDrop = YES;
    } 
	else {
		[mapView.userLocation setTitle:@"I am here"];
	}
	return pinView;

    
}
*/
/*
- (iCodeBlogAnnotationView *)mapView:(MKMapView *)mapView viewForAnnotation:(id <MKAnnotation>)annotation
{
	iCodeBlogAnnotationView *annotationView = nil;
	
	// determine the type of annotation, and produce the correct type of annotation view for it.
	iCodeBlogAnnotation* myAnnotation = (iCodeBlogAnnotation *)annotation;
	
	if(myAnnotation.annotationType == iCodeBlogAnnotationTypeApple)
	{
		NSString* identifier = @"Apple";
		iCodeBlogAnnotationView *newAnnotationView = (iCodeBlogAnnotationView *)[self.mapView dequeueReusableAnnotationViewWithIdentifier:identifier];
		
		if(nil == newAnnotationView)
		{
			newAnnotationView = [[[iCodeBlogAnnotationView alloc] initWithAnnotation:myAnnotation reuseIdentifier:identifier] autorelease];
		}
		
		annotationView = newAnnotationView;
	}
	else if(myAnnotation.annotationType == iCodeBlogAnnotationTypeEDU)
	{
		NSString* identifier = @"School";
		
		iCodeBlogAnnotationView *newAnnotationView = (iCodeBlogAnnotationView *)[self.mapView dequeueReusableAnnotationViewWithIdentifier:identifier];
		
		if(nil == newAnnotationView)
		{
			newAnnotationView = [[[iCodeBlogAnnotationView alloc] initWithAnnotation:myAnnotation reuseIdentifier:identifier] autorelease];
		}
		
		annotationView = newAnnotationView;
	}
	else if(myAnnotation.annotationType == iCodeBlogAnnotationTypeTaco)
	{
		NSString* identifier = @"Taco";
		
		iCodeBlogAnnotationView *newAnnotationView = (iCodeBlogAnnotationView *)[self.mapView dequeueReusableAnnotationViewWithIdentifier:identifier];
		
		if(nil == newAnnotationView)
		{
			newAnnotationView = [[[iCodeBlogAnnotationView alloc] initWithAnnotation:myAnnotation reuseIdentifier:identifier] autorelease];
		}
		
		annotationView = newAnnotationView;
	}
	
	[annotationView setEnabled:YES];
	[annotationView setCanShowCallout:YES];
	
	return annotationView;
}

*/
#pragma mark -

+ (CGFloat)annotationPadding;
{
    return 10.0f;
}
+ (CGFloat)calloutHeight;
{
    return 40.0f;
}

//- (void)gotoLocation
//{
//    // start off by default in San Francisco
//    MKCoordinateRegion newRegion;
//   
//    newRegion.center.latitude = 37.786996;
//   newRegion.center.longitude = -122.440100;
//    newRegion.span.latitudeDelta = 0.112872;
//    newRegion.span.longitudeDelta = 0.109863;
//	
//    [self.mapView setRegion:newRegion animated:YES];
//}

/*
// Override to allow orientations other than the default portrait orientation.
- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation {
    // Return YES for supported orientations.
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}
*/

-(IBAction)btnwhoglued_clicked
{
    
    meetingpointview *obj = [[meetingpointview alloc]init];
	[self.navigationController pushViewController:obj animated:YES];
    
//	listwhoglued *obj = [[listwhoglued alloc]init];
//	
//	[self.navigationController pushViewController:obj animated:YES];
}

- (void)didReceiveMemoryWarning {
    // Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
    
    // Release any cached data, images, etc. that aren't in use.
}

- (void)viewDidUnload {
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
}


- (void)dealloc {
    [dic release];
    [latArray release];
    [longArray release];
   // [mapView release];
    [super dealloc];
}


@end
